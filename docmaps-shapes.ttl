@prefix : <https://w3id.org/docmaps/v0/> .
@prefix ti: <http://www.ontologydesignpatterns.org/cp/owl/timeinterval.owl#> .
@prefix cnt: <http://www.w3.org/2011/content#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix pro: <http://purl.org/spar/pro/> .
@prefix pso: <http://purl.org/spar/pso/> .
@prefix pwo: <http://purl.org/spar/pwo/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix frbr: <http://purl.org/vocab/frbr/core#> .
@prefix prov: <https://www.w3.org/TR/prov-o/> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix fabio: <http://purl.org/spar/fabio/> .
@prefix prism: <http://prismstandard.org/namespaces/basic/2.0/> .
@prefix taskex: <http://www.ontologydesignpatterns.org/cp/owl/taskexecution.owl#> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .

@base <https://w3id.org/docmaps/v0/> .
#################################################################
#    Shapes
#################################################################

:Docmap a owl:Class ;
        rdfs:subClassOf pwo:Workflow ;
        rdfs:label "Docmap" ;
        rdfs:comment "A Docmap is a Workflow of publishing steps with additional metadata" ;
        .

# TODO: investigate whether it makes sense to use specific OWL classes and SHACL shapes
# at the same time for all sub-elements.
:Thing a owl:Class ;
        rdfs:subClassOf owl:Thing ;
        rdfs:label "Any Research Object" ;
        rdfs:comment "A docmaps:Thing is the generic holder for a research object" ;
        .

:DocmapShape
        a sh:NodeShape ;
        sh:targetClass :Docmap ;
        sh:nodeKind sh:IRI ;
        sh:property [
                sh:path dcterms:created ;
                # TODO: specify it is an xsd:date string
                sh:minCount 1 ;
                sh:maxCount 1 ;
        ] ;
        sh:property [
                sh:path dcterms:updated ;
                # TODO: specify it is an xsd:date string
                sh:maxCount 1 ;
        ] ;
        sh:property [
                sh:path pwo:hasFirstStep ;
                # possibly redundant because it is a owl:subPropertyOf hasStep;
                # specifying here may be useful however for generation.
                sh:node :DocmapStepShape ;
                sh:maxCount 1 ;
        ] ;
        sh:property [
                sh:path dcterms:publisher ;
                sh:node :DocmapPublisherShape ;
                sh:minCount 1 ;
        ] ;
        sh:property [
                sh:path pwo:hasStep ;
                sh:node :DocmapStepShape ;
        ]
        # TODO remove comments from these Closed lines for max constraint
        # sh:closed true ;
        .

# TODO: add constraints to this
:DocmapPublisherShape
        a sh:NodeShape ;
        sh:ignoredProperties ( rdf:type ) ;
        .

:DocmapStepShape
        a sh:NodeShape ;
        sh:ignoredProperties ( rdf:type ) ;
        sh:node :DocmapStepSequenceShape ;
        sh:node :DocmapStepPropsShape ;
        # sh:closed true ;
        .

:DocmapStepPropsShape
        a sh:NodeShape ;
        sh:property [
                sh:path taskex:isExecutedIn ;
                sh:node :DocmapActionShape ;
        ] ;
        .

# DocMap Step is separated into two subclasses because SHACL parsers will hit
#       a stack overflow when traversing a LinkedList that refers circularly.
#       TODO: ensure that this is safe as-is even with long list.
:DocmapStepSequenceShape
        a sh:NodeShape ;
        sh:property [
                sh:path pwo:hasNextStep ;
                sh:node :DocmapStepShape ;
        ] ;
        sh:property [
                sh:path pwo:hasPreviousStep ;
                # Note how in the backward case, we just assert that it has the Props,
                # a weaker assertion.
                sh:node :DocmapStepPropsShape ;
        ] ;
        .

:DocmapActionShape
        a sh:NodeShape ;
        sh:ignoredProperties ( rdf:type ) ;
        sh:property [
                sh:path pwo:produces ;
                sh:node :DocmapThingShape ;
        ] ;
        sh:property [
                # "participants", in json-ld documents
                sh:path pro:isDocumentContextFor ;
                sh:node :DocmapRoleInTimeShape ;
        ] ;
        sh:property [
                # "assertions:
                sh:path pso:resultsInAcquiring
        ]
        .

:DocmapRoleInTimeShape
        a sh:NodeShape ;
        sh:closed true ;
        sh:property [
                sh:path pro:isHeldBy ;
                # TODO: specify that this is an Agent
        ] ;
        sh:property [
                sh:path pro:withRole ;
                # TODO: specify that this is an Agent
                # in a more canonical way , such as
                #       sh:class pro:PublishingRole ; # or
                #       sh:property [
                #               sh:path rdf:type ;
                #               sh:hasValue pro:PublishingRole ;
                #       ] ;
                sh:node :DocmapRoleAsPublishingRole ;
        ] ;
        .


## DocmapRoleAsPublishingRole
#
# This is a shim to state what roles are
# subsets of publishing roles. This is a
# shim until TODO: i get `sh:class` working.
#
:DocmapRoleAsPublisherRole
        a sh:PropertyShape ;
        sh:in (
                pro:archivist
                pro:author
                pro:authors-agent
                pro:biographer
                pro:blogger
                pro:commissioning-editor
                pro:compiler
                pro:contributor
                pro:copy-editor
                pro:copyright-owner
                pro:critic
                pro:deputy-editor
                pro:distributor
                pro:editor
                pro:editor-in-chief
                pro:executive-editor
                pro:ghost-writer
                pro:guest-editor
                pro:illustrator
                pro:journalist
                pro:librarian
                pro:managing-editor
                pro:peer-reviewer
                pro:printer
                pro:producer
                pro:production-editor
                pro:proof-reader
                pro:publisher
                pro:reader
                pro:senior-editor
                pro:series-editor
                pro:translator
                pro:reviewer
        )
        .

:DocmapThingShape
        a sh:NodeShape ;
        sh:targetClass :Thing ;
        # sh:closed true ;
        .
